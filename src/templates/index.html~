{% extends "layout.html" %}
{% block body %}
<body>
        <section id="demo">
            <div class="vertical-align">
                <div class="container">
                    <div class="row">
                        <div class="col-sm-6 col-sm-offset-3 col-xs-offset-0">
                            <div class="card no-border">
                                <div id="chat" class="conv-form-wrapper">








                                    <form action=""  method="GET" class="hidden">





				      {% with feedback = get_flashed_messages(category_filter=["feedback"]) %}
				      {% if feedback %}
					{%- for fdbk in feedback %}
                                        <input type="text" conv-question="{{ fdbk }}" no-answer="true">
					{% endfor -%}				
	
			   		{% endif %}
					{% endwith %}				      



				      {% with messages = get_flashed_messages(category_filter=["next_message"]) %}
				      {% if messages %}
					{% for message in messages %}
                                        <input type="text" name="name" conv-question="{{ message }}">
					{% endfor %}
				      {% endif %}
				      {% endwith %}

 

				      {% with options = get_flashed_messages(category_filter=["options"]) %}
				      {% if options %}
				         {% with messages = get_flashed_messages(category_filter=["prompt"]) %}
				         <select name="decision"  method="post"  conv-question="{{ messages[0] }}">
					 {% endwith %}				      

					{%- for msg in options %}
					<option value="{{ msg }}">{{ msg }}</option>
					{% endfor -%}

			   		{% endif %}
					
					{% endwith %}				      
                                    </form>




                                </div>
				      {% with feedback = get_flashed_messages(category_filter=["visual"]) %}
				      {% if feedback %}
				      {% with visualdata = get_flashed_messages(category_filter=["visual_data"]) %}
				      {% if visualdata %}
  <div id="main">
      <div id="sequence"></div>
      <div id="chart">
        <div id="explanation" style="visibility: hidden;">
          <span id="percentage"></span><br/>
          of visits begin with this sequence of pages
        </div>
      </div>
    </div>
    <div id="sidebar">
      <input type="checkbox" id="togglelegend"> Legend<br/>
      <div id="legend" style="visibility: hidden;"></div>
    </div>
    <script type="text/javascript" src="/static/stylesheets/sequences.js"  payload="{{ visualdata[0] }}"></script>
    <script type="text/javascript">
      d3.select(self.frameElement).style("height", "250px");
  </script> 
  </body>
			   		{% endif %}                                       
                                      {% endwith %}

				      {% with visualdata = get_flashed_messages(category_filter=["forecast_data"]) %}
				      {% if visualdata %}


<svg width="960" height="500"></svg>
<script src="//d3js.org/d3.v4.min.js"></script>
<script>

var svg = d3.select("svg"),
    margin = {top: 20, right: 80, bottom: 30, left: 50},
    width = svg.attr("width") - margin.left - margin.right,
    height = svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var parseTime = d3.timeParse("%Y%m%d");

var x = d3.scaleTime().range([0, width]),
    y = d3.scaleLinear().range([height, 0]),
    z = d3.scaleOrdinal(d3.schemeCategory10);

var line = d3.line()
    .curve(d3.curveBasis)
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.temperature); });

d3.tsv("/static/stylesheets.data.tsv", type, function(error, data) {
  if (error) throw error;

  var cities = data.columns.slice(1).map(function(id) {
    return {
      id: id,
      values: data.map(function(d) {
        return {date: d.date, temperature: d[id]};
      })
    };
  });

  x.domain(d3.extent(data, function(d) { return d.date; }));

  y.domain([
    d3.min(cities, function(c) { return d3.min(c.values, function(d) { return d.temperature; }); }),
    d3.max(cities, function(c) { return d3.max(c.values, function(d) { return d.temperature; }); })
  ]);

  z.domain(cities.map(function(c) { return c.id; }));

  g.append("g")
      .attr("class", "axis axis--x")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x));

  g.append("g")
      .attr("class", "axis axis--y")
      .call(d3.axisLeft(y))
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", "0.71em")
      .attr("fill", "#000")
      .text("Temperature, ÂºF");

  var city = g.selectAll(".city")
    .data(cities)
    .enter().append("g")
      .attr("class", "city");

  city.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return z(d.id); });

  city.append("text")
      .datum(function(d) { return {id: d.id, value: d.values[d.values.length - 1]}; })
      .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
      .attr("x", 3)
      .attr("dy", "0.35em")
      .style("font", "10px sans-serif")
      .text(function(d) { return d.id; });
});

function type(d, _, columns) {
  d.date = parseTime(d.date);
  for (var i = 1, n = columns.length, c; i < n; ++i) d[c = columns[i]] = +d[c];
  return d;
}

</script>





			   		{% endif %}
					{% endwith %}				      


			   		{% endif %}
					{% endwith %}				      


                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <script type="text/javascript" src="/static/stylesheets/jquery-1.12.3.min.js"></script>
        <script type="text/javascript" src="/static/stylesheets/autosize.min.js"></script>
        <script type="text/javascript" src="/static/stylesheets/dragscroll.js"></script>
        <script type="text/javascript" src="/static/stylesheets/jquery.convform.min.js"></script>




</body>
{% endblock %}
